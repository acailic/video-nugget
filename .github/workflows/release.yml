name: Release

on:
  push:
    tags:
      - 'v*'

env:
  CARGO_TERM_COLOR: always

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      version: ${{ steps.get_version.outputs.version }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Get version from tag
        id: get_version
        run: echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Generate changelog
        id: changelog
        run: |
          # Get commits since last tag
          LAST_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          if [ -n "$LAST_TAG" ]; then
            CHANGELOG=$(git log --pretty=format:"- %s" $LAST_TAG..HEAD)
          else
            CHANGELOG=$(git log --pretty=format:"- %s" HEAD)
          fi
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ steps.get_version.outputs.version }}
          body: |
            ## What's Changed
            ${{ steps.changelog.outputs.changelog }}
            
            ## Installation
            Download the appropriate installer for your platform below.
            
            ### Windows
            - Download the `.msi` installer
            
            ### macOS
            - Download the `.dmg` file
            - For Apple Silicon Macs, use the `aarch64` version
            - For Intel Macs, use the `x64` version
            
            ### Linux
            - Download the `.AppImage` file for universal compatibility
            - Or use the `.deb` package for Debian/Ubuntu systems
          draft: false
          prerelease: ${{ contains(steps.get_version.outputs.version, 'alpha') || contains(steps.get_version.outputs.version, 'beta') || contains(steps.get_version.outputs.version, 'rc') }}

  build-and-upload:
    name: Build and Upload
    needs: create-release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            bundle: deb,appimage
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            bundle: msi
          - os: macos-latest
            target: x86_64-apple-darwin
            bundle: dmg
          - os: macos-latest
            target: aarch64-apple-darwin
            bundle: dmg

    steps:
      - uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: src-tauri
          key: ${{ matrix.target }}

      - name: Install system dependencies (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.0-dev libappindicator3-dev librsvg2-dev patchelf

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Update version in Cargo.toml
        run: |
          VERSION="${{ needs.create-release.outputs.version }}"
          VERSION=${VERSION#v} # Remove 'v' prefix
          sed -i.bak "s/^version = \".*\"/version = \"$VERSION\"/" src-tauri/Cargo.toml
          rm src-tauri/Cargo.toml.bak

      - name: Update version in package.json
        run: |
          VERSION="${{ needs.create-release.outputs.version }}"
          VERSION=${VERSION#v} # Remove 'v' prefix
          npm version $VERSION --no-git-tag-version

      - name: Build Tauri application
        run: npm run tauri:build -- --target ${{ matrix.target }} --bundles ${{ matrix.bundle }}

      - name: Upload release assets (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          for file in src-tauri/target/${{ matrix.target }}/release/bundle/deb/*.deb; do
            if [ -f "$file" ]; then
              gh release upload ${{ needs.create-release.outputs.version }} "$file"
            fi
          done
          for file in src-tauri/target/${{ matrix.target }}/release/bundle/appimage/*.AppImage; do
            if [ -f "$file" ]; then
              gh release upload ${{ needs.create-release.outputs.version }} "$file"
            fi
          done
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload release assets (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          Get-ChildItem -Path "src-tauri/target/${{ matrix.target }}/release/bundle/msi/*.msi" | ForEach-Object {
            gh release upload ${{ needs.create-release.outputs.version }} $_.FullName
          }
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload release assets (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          for file in src-tauri/target/${{ matrix.target }}/release/bundle/dmg/*.dmg; do
            if [ -f "$file" ]; then
              # Rename file to include architecture
              NEW_NAME=$(basename "$file" .dmg)-${{ matrix.target }}.dmg
              cp "$file" "$NEW_NAME"
              gh release upload ${{ needs.create-release.outputs.version }} "$NEW_NAME"
            fi
          done
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish-metrics:
    name: Publish Release Metrics
    needs: [create-release, build-and-upload]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Report release completion
        run: |
          echo "Release ${{ needs.create-release.outputs.version }} completed"
          echo "Build status: ${{ needs.build-and-upload.result }}"